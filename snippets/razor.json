{
    "Component Tag Helper": {
        "prefix": "bl-component-tag-helper",
        "body": [
            "<component type=\"typeof(${1:MyComponent})\" render-mode=\"${2|ServerPrerendered,Server,Static|}\" />"
        ]
    },
    "Component Tag Helper with Parameter": {
        "prefix": "bl-component-tag-helper-param",
        "body": [
            "<component type=\"typeof(${1:MyComponent})\" render-mode=\"${2|ServerPrerendered,Server,Static|}\" param-${3:MyParameter}=\"${4:Value}\" />"
        ]
    },
    "Code Block": {
        "prefix": "bl-code",
        "body": [
            "@code {",
            "\t$0",
            "}"
        ]
    },
    "@page Directive": {
        "prefix": "bl-page",
        "body": [
            "@page \"/${1:${TM_FILENAME_BASE}}\""
        ]
    },
    "@page Directive with Parameter": {
        "prefix": "bl-page-param",
        "body": [
            "@page \"/${1:${TM_FILENAME_BASE}}/{${2:Id}:${3|int,bool,datetime,decimal,double,float,guid,long|}}\""
        ]
    },
    "@inject Directive": {
        "prefix": "bl-inject",
        "body": [
            "@inject ${1:MyService} ${2:$1}"
        ]
    },
    "@using Directive": {
        "prefix": "bl-using",
        "body": [
            "@using ${1:Namespace}"
        ]
    },
    "@typeparam Directive": {
        "prefix": "bl-typeparam",
        "body": [
            "@typeparam ${1:T}"
        ]
    },
    "@layout Directive": {
        "prefix": "bl-layout",
        "body": [
            "@layout ${1:Layout}"
        ]
    },
    "@inherits OwningComponentBase Directive": {
        "prefix": "bl-owningComponentBase",
        "body": [
            "@inherits OwningComponentBase${1:<ApplicationDbContext>}"
        ]
    },
    "@attribute [Authorize] Directive": {
        "prefix": "bl-authorize",
        "body": [
            "@attribute [Authorize]"
        ]
    },
    "@attributes Attribute": {
        "prefix": "bl-attributes",
        "body": [
            "@attributes=\"${1:Attributes}\""
        ]
    },
    "@bind Attribute": {
        "prefix": "bl-bind",
        "body": [
            "@bind=\"${1:Property}\""
        ]
    },
    "@bind-Value Attribute": {
        "prefix": "bl-bind-value",
        "body": [
            "@bind-${1:Value}=\"${2:Property}\""
        ]
    },
    "@bind-value & @bind-value:event Attributes": {
        "prefix": "bl-bind-event",
        "body": [
            "@bind-${1:value}=\"${2:Property}\" @bind-$1:event=\"${3:oninput}\""
        ]
    },
    "@bind:format Attribute": {
        "prefix": "bl-bind-format",
        "body": [
            "@bind:format=\"${1:yyyy-MM-dd}\""
        ]
    },
    "@event:preventDefault Attribute": {
        "prefix": "bl-preventDefault",
        "body": [
            "@${1:onkeypress}:preventDefault"
        ]
    },
    "@ref Attribute": {
        "prefix": "bl-ref",
        "body": [
            "@ref=\"${1:Property}\""
        ]
    },
    "Component": {
        "prefix": "bl-component",
        "body": [
            "@page \"${1:/}\"",
            "",
            "$0",
            "",
            "@code {",
            "",
            "}"
        ]
    },
    "Layout Component": {
        "prefix": "bl-component-layout",
        "body": [
            "@inherits LayoutComponentBase",
            "$0",
            "@Body",
            "",
            "@code {",
            "",
            "}"
        ]
    },
    "Disposable Component": {
        "prefix": "bl-component-disposable",
        "body": [
            "@implements IDisposable",
            "",
            "@code {",
            "\tpublic void Dispose()",
            "\t{",
            "\t\t$0",
            "\t}",
            "}"
        ]
    },
    "Component with HTTP call": {
        "prefix": "bl-component-http",
        "body": [
            "@inject HttpClient Http",
            "",
            "$0",
            "",
            "@code {",
            "\t${2:private} ${3:string} ${4:Name} { get; set; }",
            "",
            "\tprotected override async Task OnInitializedAsync()",
            "\t{",
            "\t\t${4} = await Http.GetJsonAsync<${3}>(\"${5:api/}\");",
            "\t}",
            "}"
        ]
    },
    "Component receiving notifications": {
        "prefix": "bl-component-notify",
        "body": [
            "@inject ${1:NotifierService} ${2:Notifier}",
            "@implements IDisposable",
            "",
            "@code {",
            "\tprotected override void OnInitialized()",
            "\t{",
            "\t\t$2.${3:Notify} += $4;",
            "\t}",
            "",
            "\t${5:public} async Task ${4:OnNotify}(${6:string key, int value})",
            "\t{",
            "\t\tawait InvokeAsync(() =>",
            "\t\t{",
            "\t\t\t$0",
            "\t\t\tStateHasChanged();",
            "\t\t});",
            "\t}",
            "",
            "\tpublic void Dispose()",
            "\t{",
            "\t\t$2.$3 -= $4;",
            "\t}",
            "}"
        ]
    },
    "Component with Child Content": {
        "prefix": "bl-component-child",
        "body": [
            "@ChildContent",
            "",
            "@code {",
            "\t[Parameter]",
            "\tpublic RenderFragment ChildContent { get; set; }",
            "}"
        ]
    },
    "Templated Component": {
        "prefix": "bl-component-templated",
        "body": [
            "@typeparam TItem",
            "",
            "<table>",
            "\t<thead>",
            "\t\t<tr>@TableHeader</tr>",
            "\t</thead>",
            "\t<tbody>",
            "\t\t@foreach (var item in Items)",
            "\t\t{",
            "\t\t\t<tr>@RowTemplate(item)</tr>",
            "\t\t}",
            "\t</tbody>",
            "\t<tfoot>",
            "\t\t<tr>@TableFooter</tr>",
            "\t</tfoot>",
            "</table>",
            "",
            "@code {",
            "\t[Parameter]",
            "\tpublic RenderFragment TableHeader { get; set; }",
            "",
            "\t[Parameter]",
            "\tpublic RenderFragment<TItem> RowTemplate { get; set; }",
            "",
            "\t[Parameter]",
            "\tpublic RenderFragment TableFooter { get; set; }",
            "",
            "\t[Parameter]",
            "\tpublic IReadOnlyList<TItem> Items { get; set; }",
            "}"
        ]
    },
    "NavLink": {
        "prefix": "bl-navlink",
        "body": [
            "<NavLink href=\"${1}\">${3:Home}</NavLink>"
        ]
    },
    "NavLink with Match attribute": {
        "prefix": "bl-navlink-match",
        "body": [
            "<NavLink href=\"${1}\" Match=\"${2|NavLinkMatch.All,NavLinkMatch.Prefix|}\">${3:Home}</NavLink>"
        ]
    },
    "Form Group (label, input, validation message)": {
        "prefix": "bl-form-group",
        "body": [
            "<div>",
            "\t<label for=\"@nameof(${1:model.Name})\">${2:@nameof(${1})}</label>",
            "\t<${3:InputText} id=\"@nameof(${1})\" bind-Value=\"@${1}\" />",
            "\t<ValidationMessage For=\"@(() => ${1})\" />",
            "</div>"
        ]
    },
    "Form with validation": {
        "prefix": "bl-form",
        "body": [
            "<EditForm Model=\"@${1:model}\" OnValidSubmit=\"@${2:HandleValidSubmit}\">",
            "\t<DataAnnotationsValidator />",
            "\t<ValidationSummary />",
            "\t$0",
            "\t<button type=\"submit\">${3:Submit}</button>",
            "</EditForm>"
        ]
    },
    "CascadingValue Component": {
        "prefix": "bl-cascadingValue",
        "body": [
            "<CascadingValue Value=\"${1:Value}\">",
            "\t$0",
            "</CascadingValue>"
        ]
    },
    "AuthorizeView Component": {
        "prefix": "bl-authorizeView",
        "body": [
            "<AuthorizeView>",
            "\t${1:<p>Hello, @context.User.Identity.Name</p>}$0",
            "</AuthorizeView>"
        ]
    },
    "AuthorizeView Component using Roles": {
        "prefix": "bl-authorizeView-roles",
        "body": [
            "<AuthorizeView Roles=\"${1:admin, superuser}\">",
            "\t${2:<p>You can only see this if you're an admin or superuser.</p>}$0",
            "</AuthorizeView>"
        ]
    },
    "AuthorizeView Component with NotAuthorized section": {
        "prefix": "bl-authorizeView-not",
        "body": [
            "<AuthorizeView>",
            "\t<Authorized>",
            "\t\t${1:<p>Hello, @context.User.Identity.Name</p>}$0",
            "\t</Authorized>",
            "\t<NotAuthorized>",
            "\t\t<p>You're not signed in.</p>",
            "\t</NotAuthorized>",
            "</AuthorizeView>"
        ]
    }
}